"""
Teste simplificado da integra√ß√£o
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from core.simple_solver import SimplifiedEDPSolver

def main():
    print("=== Teste da Integra√ß√£o Simplificada ===\n")
    
    # Criar solver
    solver = SimplifiedEDPSolver()
    
    # 1. Status do sistema
    print("1. Status do Sistema:")
    status = solver.status_report()
    print(f"   Problemas dispon√≠veis: {status['problems_available']}")
    print(f"   M√©todos dispon√≠veis: {status['methods_available']}")
    print(f"   Status da integra√ß√£o: {status['integration_status']}")
    
    # 2. Listar problemas
    print("\n2. Problemas no Cat√°logo:")
    problems = solver.list_problems()
    for key, name in problems.items():
        print(f"   - {key}: {name}")
    
    # 3. Listar m√©todos
    print("\n3. M√©todos Dispon√≠veis:")
    methods = solver.list_methods()
    for method in methods:
        print(f"   - {method}")
    
    # 4. Testar informa√ß√µes de problema
    print("\n4. Informa√ß√µes do Problema 'poisson':")
    try:
        info = solver.get_problem_info("poisson")
        print(f"   Nome: {info['nome']}")
        print(f"   Equa√ß√£o: {info['equation']}")
        print(f"   Dom√≠nio: {info['domain']}")
        print(f"   Condi√ß√µes de contorno: {len(info['boundary_conditions_summary']['dirichlet'])} Dirichlet")
    except Exception as e:
        print(f"   Erro: {e}")
    
    # 5. Testar recomenda√ß√µes
    print("\n5. Recomenda√ß√µes por Problema:")
    for problem in problems.keys():
        try:
            recommendations = solver.recommend_method(problem)
            print(f"   {problem}: {recommendations}")
        except Exception as e:
            print(f"   {problem}: Erro - {e}")
    
    # 6. Testar resolu√ß√£o
    print("\n6. Tentativa de Resolu√ß√£o:")
    for problem in list(problems.keys())[:2]:  # Testar apenas 2 primeiros
        recommendations = solver.recommend_method(problem)
        
        if recommendations:
            method = recommendations[0]
            print(f"   Resolvendo {problem} com {method}...")
            
            try:
                result = solver.solve(problem, method, n_terms=3)
                print(f"   Status: {result['status']}")
                if result['status'] == 'success':
                    print(f"   Solu√ß√£o: {type(result['solution'])}")
                elif result['status'] == 'error':
                    print(f"   Erro: {result['error']}")
            except Exception as e:
                print(f"   Exce√ß√£o: {e}")
        else:
            print(f"   {problem}: Nenhum m√©todo dispon√≠vel")
    
    # 7. Compara√ß√£o de m√©todos
    print("\n7. Compara√ß√£o de M√©todos (Poisson):")
    if methods:
        try:
            comparison = solver.compare_methods("poisson", methods[:1], n_terms=3)
            for method, result in comparison.items():
                print(f"   {method}: {result.get('status', 'unknown')}")
        except Exception as e:
            print(f"   Erro na compara√ß√£o: {e}")
    
    print("\n" + "="*50)
    print("üéâ Integra√ß√£o b√°sica funcionando!")
    print("\nüí° Pr√≥ximos passos:")
    print("1. Corrigir conflitos nos m√©todos num√©ricos")
    print("2. Implementar m√©todos faltantes")
    print("3. Adicionar visualiza√ß√£o")
    print("4. Expandir cat√°logo de problemas")

if __name__ == "__main__":
    main()
