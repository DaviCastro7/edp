"""
Testes para verificar a integra√ß√£o entre EDPs e m√©todos num√©ricos
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from core.solver import EDPSolver
import numpy as np

def test_basic_integration():
    """Teste b√°sico da integra√ß√£o"""
    print("=== Teste de Integra√ß√£o B√°sica ===\n")
    
    try:
        # Criar solver
        solver = EDPSolver()
        print("‚úì Solver criado com sucesso")
        
        # Listar problemas
        problems = solver.list_problems()
        print(f"‚úì Problemas dispon√≠veis: {list(problems.keys())}")
        
        # Listar m√©todos
        methods = solver.list_methods()
        print(f"‚úì M√©todos dispon√≠veis: {methods}")
        
        # Testar defini√ß√£o de problema
        solver.set_problem("poisson")
        print("‚úì Problema 'poisson' definido com sucesso")
        
        # Testar recomenda√ß√µes
        recommendations = solver.recommend_method("poisson")
        print(f"‚úì Recomenda√ß√µes para Poisson: {recommendations}")
        
        # Testar informa√ß√µes do problema
        info = solver.get_problem_info("poisson")
        print(f"‚úì Informa√ß√µes do problema obtidas: {info['nome']}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro no teste: {e}")
        return False

def test_method_compatibility():
    """Testa a compatibilidade entre problemas e m√©todos"""
    print("\n=== Teste de Compatibilidade ===\n")
    
    solver = EDPSolver()
    
    # Testa todos os problemas
    problems = ["poisson", "onda_1d", "calor", "helmholtz"]
    
    for problem in problems:
        try:
            recommendations = solver.recommend_method(problem)
            print(f"‚úì {problem}: {recommendations}")
        except Exception as e:
            print(f"‚úó {problem}: Erro - {e}")

def test_problem_validation():
    """Testa a valida√ß√£o de problemas"""
    print("\n=== Teste de Valida√ß√£o ===\n")
    
    solver = EDPSolver()
    
    for problem_name in solver.list_problems().keys():
        try:
            solver.set_problem(problem_name)
            print(f"‚úì {problem_name}: Valida√ß√£o passou")
        except Exception as e:
            print(f"‚úó {problem_name}: Erro de valida√ß√£o - {e}")

def test_solve_attempt():
    """Tenta resolver um problema simples"""
    print("\n=== Teste de Resolu√ß√£o ===\n")
    
    solver = EDPSolver()
    
    # Tenta resolver cada problema com m√©todos compat√≠veis
    for problem_name in ["poisson"]:  # Come√ßar s√≥ com Poisson
        try:
            recommendations = solver.recommend_method(problem_name)
            
            for method in recommendations[:2]:  # Testa os 2 primeiros m√©todos
                try:
                    print(f"Tentando resolver {problem_name} com {method}...")
                    result = solver.solve(problem_name, method, n_terms=3)
                    print(f"‚úì {problem_name} + {method}: Sucesso")
                except Exception as e:
                    print(f"‚úó {problem_name} + {method}: {e}")
                    
        except Exception as e:
            print(f"‚úó Erro geral para {problem_name}: {e}")

if __name__ == "__main__":
    print("Iniciando testes de integra√ß√£o...\n")
    
    success = True
    success &= test_basic_integration()
    test_method_compatibility()
    test_problem_validation()
    test_solve_attempt()
    
    print(f"\n{'='*50}")
    if success:
        print("üéâ Integra√ß√£o funcionando corretamente!")
    else:
        print("‚ö†Ô∏è  Alguns problemas encontrados na integra√ß√£o")
    
    print("\nüí° Pr√≥ximos passos:")
    print("1. Implementar m√©todos num√©ricos espec√≠ficos")
    print("2. Adicionar visualiza√ß√£o de resultados")
    print("3. Criar interface gr√°fica")
    print("4. Adicionar mais problemas ao cat√°logo")
